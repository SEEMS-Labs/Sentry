#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#include <BLE2902.h>
#include <BLE2901.h>

#define SERVICE_UUID        "ab3b4f86-a60b-439f-98a0-ebb022b74550"
#define CHARACTERISTIC_UUID "e8f99c04-2c62-4660-bc38-30e488e1fd5d"

class BLEConnectionManager : public BLEServerCallbacks, public BLECharacteristicCallbacks {

  private:
    BLEServer *server;
    BLEService *service;
    BLECharacteristic *characteristic;
    BLEAdvertising *advertiser;
    bool _ble_status;
    int received;
    uint16_t id;

  public:
    BLEConnectionManager() {
      server = NULL;
      service = NULL;
      characteristic = NULL;
      advertiser = NULL;
      _ble_status = false;
      received = 0;
      id = 0;
    }

    void init() {

      // Create server.
      BLEDevice::init("SEEMS-Sentry");
      server = BLEDevice::createServer();
      
      // Create service.
      service = server->createService(SERVICE_UUID);

      // Create characteristic.
      characteristic = service->createCharacteristic(
        CHARACTERISTIC_UUID, BLECharacteristic::PROPERTY_READ | 
        BLECharacteristic::PROPERTY_WRITE |
        BLECharacteristic::PROPERTY_NOTIFY |
        BLECharacteristic::PROPERTY_INDICATE);

      // Add characteristic descriptors.
      characteristic->addDescriptor(new BLE2902()); // Client characteristic configuration descriptor (CCCD).
      BLE2901 *userDescription = new BLE2901();
      userDescription->setDescription("Receive User Networking Configuration Information (Wi-Fi).");  // custom descriptor.
      userDescription->setAccessPermissions(ESP_GATT_PERM_READ);  // Read only.
      characteristic->addDescriptor(userDescription);

      // Set initial characteristic value.
      characteristic->setValue("Sentry Ready.");

      // Set callbacks for server and characteristic.
      server->setCallbacks(this);
      characteristic->setCallbacks(this);

      // Create advertiser
      advertiser = BLEDevice::getAdvertising();
      advertiser->addServiceUUID(SERVICE_UUID);
      advertiser->setScanResponse(false);      
    }

    void begin() {
      // Start service and advertising.
      service->start();
      server->getAdvertising()->start();
    }

    void onConnect(BLEServer* pServer) override {
      Serial.println("--Client connected!");
      _ble_status = true; // Set connection status to true
      id = pServer->getConnId();
    }

    void onDisconnect(BLEServer *pServer) override {
      Serial.println("-- disconnected!");
      _ble_status = false; // Set connection status to false
    }

    void onWrite(BLECharacteristic *pCharacteristic) override {
      String value = pCharacteristic->getValue();

      if (value.length() > 0) {
        Serial.println("*********");
        Serial.print("New value: ");
        for (int i = 0; i < value.length(); i++) {
          Serial.print(value[i]);
        }

        Serial.println();
        Serial.println("*********");

        delay(500);
        char str[100];
        sprintf(str, "Value [%s] received", value.c_str());
        pCharacteristic->setValue(str);
        pCharacteristic->notify();

        received += 1;
        //if(received == 2) server->disconnect(id);
      }
    }

    bool getConnectionStatus() {
      return _ble_status;
    }

    uint32_t numDevicesConnected() { return server->getConnectedCount(); }

    void peerTest() {
      // Get the map of connected peers (devices) and their connection status
      std::map<uint16_t, conn_status_t> peers = BLEDevice::getPeerDevices(true);
      Serial.printf("Peers: %d\n", peers.size());

      // Loop through the map and print information about each peer device
      for (const auto& peer : peers) {
          uint16_t connId = peer.first;      // Connection ID of the peer device
          conn_status_t status = peer.second; // Status of the connection

          // Print the connection details
          Serial.print("Peer Device ID: ");
          Serial.print(connId);
          Serial.print(" | Connection Status: ");

          // You can add more information to the connection status depending on the status type
          if (status.connected == true)  Serial.println("Connected");
          else Serial.println("Disconnected");

      }
  }
};

BLEConnectionManager manager;
void setup() {
  Serial.begin(115200);

  manager.init();
  manager.begin();
}

void loop() {
  // put your main code here, to run repeatedly:
  Serial.printf("Looping: Dev Conn: %ld\n", manager.numDevicesConnected());
  manager.peerTest();
  if(manager.getConnectionStatus()) Serial.println("Client Connected");
  else Serial.println("Client Disconnected");
  delay(5000);
}
